- name: Setup a kubernetes node
  hosts: cluster
  become: true
  tasks:
    - name: Stop swap service
      ansible.builtin.systemd_service:
        name: dphys-swapfile
        state: stopped
        enabled: false

    - name: Remove swap service
      ansible.builtin.apt:
        name: dphys-swapfile
        state: absent

    - name: Delete swap file
      ansible.builtin.file:
        path: /var/swap
        state: absent

    - name: Add Kubernetes APT key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        filename: kubernetes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true
        autoclean: true

    - name: Install packages
      ansible.builtin.apt:
        pkg:
          - containerd
          - containernetworking-plugins
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - kubectl
          - kubeadm
          - kubelet

    - name: Edit cmdline.txt
      ansible.builtin.replace:
        path: /boot/firmware/cmdline.txt
        regexp: '^(?!.* {{ item }}.*)(?=.*console.*)(.*)$'
        replace: '\1 {{ item }}'
      with_items:
        - 'cgroup_enable=cpuset'
        - 'cgroup_enable=memory'
        - 'cgroup_memory=1'

    - name: Enable ip forwarding
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: 'net.ipv4.ip_forward='
        line: 'net.ipv4.ip_forward=1'

    - name: Enable kernel modules
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: '{{ item }}'
      with_items:
        - 'overlay'
        - 'nf_conntrack'
        - 'br_netfilter'

    - name: Select Systemd cgroup driver
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'
        backup: true
        content: |
          version = 2

          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".cni]
                bin_dir = "/usr/lib/cni"
                conf_dir = "/etc/cni/net.d"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = true
            [plugins."io.containerd.internal.v1.opt"]
              path = "/var/lib/containerd/opt"

    - name: Reboot
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible playbook"
        connect_timeout: 30

    - name: Print next steps
      ansible.builtin.debug:
        msg:
          - The node is ready to run Kubernetes!
          - To set up a control plane run
          - $ sudo kubeadm init --pod-network-cidr=10.244.0.0/16
          - To set up a worker node run this on the control node to get the join command
          - $ kubeadm token create --print-join-command
          - Then run the printed command on the worker node to connect it to the cluster.
          - Don't forget to install a CNI of your choice, i.e.
          - $ kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
          - $ sudo ln /opt/cni/bin/flannel /usr/lib/cni/flannel
